name: 🚗 Car Craft Lab Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

env:
  NODE_VERSION: '18'
  NPM_CACHE_FOLDER: ~/.npm
  NPM_CONFIG_CACHE: ~/.npm

jobs:
  # Test and Build Job
  test-and-build:
    name: 🧪 Test & Build
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './backend/package-lock.json'

      - name: 🔍 Install dependencies
        run: npm ci

      - name: 🔒 Install security dependencies
        run: npm audit --audit-level=moderate

      - name: 🧪 Run tests
        run: npm test
        env:
          NODE_ENV: test
          MONGODB_URI: ${{ secrets.MONGODB_URI_TEST }}

      - name: 📊 Run linting
        run: |
          npm run lint || echo "Linting failed but continuing..."
        continue-on-error: true

      - name: 🏗️ Build application
        run: npm run build || echo "No build script found, skipping..."

      - name: 📦 Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  # Security Scan Job
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test-and-build
    
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔍 Install dependencies
        run: npm ci

      - name: 🔒 Run security audit
        run: npm audit --audit-level=high

      - name: 🔍 Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # Deploy to Staging (develop branch)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: 📋 Add EC2 to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_STAGING_HOST }} >> ~/.ssh/known_hosts

      - name: 🚀 Deploy to staging
        run: |
          ssh ubuntu@${{ secrets.EC2_STAGING_HOST }} << 'EOF'
            cd car-craft-lab-backend
            git fetch origin
            git reset --hard origin/develop
            npm install --production
            pm2 restart car-craft-lab-backend
            echo "Staging deployment completed"
          EOF

      - name: 🏥 Health check staging
        run: |
          sleep 10
          curl -f http://${{ secrets.EC2_STAGING_HOST }}/health || exit 1

  # Deploy to Production (main branch)
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: 📋 Add EC2 to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_PRODUCTION_HOST }} >> ~/.ssh/known_hosts

      - name: 🚀 Deploy to production
        run: |
          ssh ubuntu@${{ secrets.EC2_PRODUCTION_HOST }} << 'EOF'
            cd car-craft-lab-backend
            ./ec2-update.sh
            echo "Production deployment completed"
          EOF

      - name: 🏥 Health check production
        run: |
          sleep 15
          curl -f http://${{ secrets.EC2_PRODUCTION_HOST }}/health || exit 1

      - name: 📧 Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '🚗 Car Craft Lab Backend deployed to production successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: success()

  # Notify on failure
  notify-failure:
    name: 📧 Notify Failure
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan, deploy-staging, deploy-production]
    if: failure()

    steps:
      - name: 📧 Notify failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: '❌ Car Craft Lab Backend deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 