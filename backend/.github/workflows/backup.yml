name: 💾 Backup & Recovery

on:
  schedule:
    # Run backup daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      backup_type:
        description: 'Type of backup to perform'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - database
          - application

env:
  BACKUP_RETENTION_DAYS: 7

jobs:
  # Database Backup
  database-backup:
    name: 🗄️ Database Backup
    runs-on: ubuntu-latest
    if: github.event.inputs.backup_type == 'database' || github.event.inputs.backup_type == 'full' || github.event_name == 'schedule'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: 📋 Add EC2 to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_PRODUCTION_HOST }} >> ~/.ssh/known_hosts

      - name: 🗄️ Create database backup
        run: |
          ssh ubuntu@${{ secrets.EC2_PRODUCTION_HOST }} << 'EOF'
            # Create backup directory
            mkdir -p ~/backups/database
            
            # Get current timestamp
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            
            # Create database backup using MongoDB tools
            if command -v mongodump &> /dev/null; then
              mongodump --uri="$MONGODB_URI" --out=~/backups/database/backup_$TIMESTAMP
              echo "Database backup created: backup_$TIMESTAMP"
            else
              echo "MongoDB tools not available, using Node.js backup"
              cd car-craft-lab-backend
              node -e "
                const mongoose = require('mongoose');
                const fs = require('fs');
                const path = require('path');
                
                const backupDir = path.join(process.env.HOME, 'backups/database/backup_$TIMESTAMP');
                if (!fs.existsSync(backupDir)) {
                  fs.mkdirSync(backupDir, { recursive: true });
                }
                
                mongoose.connect(process.env.MONGODB_URI)
                  .then(async () => {
                    const collections = await mongoose.connection.db.listCollections().toArray();
                    
                    for (const collection of collections) {
                      const data = await mongoose.connection.db.collection(collection.name).find({}).toArray();
                      const filePath = path.join(backupDir, collection.name + '.json');
                      fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
                      console.log('Backed up collection:', collection.name);
                    }
                    
                    console.log('Database backup completed');
                    process.exit(0);
                  })
                  .catch(err => {
                    console.error('Backup failed:', err);
                    process.exit(1);
                  });
              "
            fi
            
            # Compress backup
            cd ~/backups/database
            tar -czf backup_$TIMESTAMP.tar.gz backup_$TIMESTAMP
            rm -rf backup_$TIMESTAMP
            
            # Clean old backups (keep last 7 days)
            find . -name "backup_*.tar.gz" -mtime +$BACKUP_RETENTION_DAYS -delete
            
            echo "Database backup completed: backup_$TIMESTAMP.tar.gz"
          EOF

      - name: 📥 Download backup
        run: |
          scp ubuntu@${{ secrets.EC2_PRODUCTION_HOST }}:~/backups/database/backup_*.tar.gz ./database-backup.tar.gz

      - name: 📤 Upload to GitHub Releases
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./database-backup.tar.gz
          asset_name: database-backup-$(date +%Y%m%d_%H%M%S).tar.gz
          asset_content_type: application/gzip

  # Application Backup
  application-backup:
    name: 📦 Application Backup
    runs-on: ubuntu-latest
    if: github.event.inputs.backup_type == 'application' || github.event.inputs.backup_type == 'full' || github.event_name == 'schedule'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: 📋 Add EC2 to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_PRODUCTION_HOST }} >> ~/.ssh/known_hosts

      - name: 📦 Create application backup
        run: |
          ssh ubuntu@${{ secrets.EC2_PRODUCTION_HOST }} << 'EOF'
            # Create backup directory
            mkdir -p ~/backups/application
            
            # Get current timestamp
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            
            # Create application backup
            cd ~/car-craft-lab-backend
            tar -czf ~/backups/application/app_backup_$TIMESTAMP.tar.gz \
              --exclude='node_modules' \
              --exclude='logs' \
              --exclude='.git' \
              --exclude='backups' \
              .
            
            # Clean old backups (keep last 7 days)
            cd ~/backups/application
            find . -name "app_backup_*.tar.gz" -mtime +$BACKUP_RETENTION_DAYS -delete
            
            echo "Application backup completed: app_backup_$TIMESTAMP.tar.gz"
          EOF

      - name: 📥 Download application backup
        run: |
          scp ubuntu@${{ secrets.EC2_PRODUCTION_HOST }}:~/backups/application/app_backup_*.tar.gz ./application-backup.tar.gz

      - name: 📤 Upload to GitHub Releases
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./application-backup.tar.gz
          asset_name: application-backup-$(date +%Y%m%d_%H%M%S).tar.gz
          asset_content_type: application/gzip

  # Configuration Backup
  config-backup:
    name: ⚙️ Configuration Backup
    runs-on: ubuntu-latest
    if: github.event.inputs.backup_type == 'full' || github.event_name == 'schedule'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: 📋 Add EC2 to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_PRODUCTION_HOST }} >> ~/.ssh/known_hosts

      - name: ⚙️ Backup configuration files
        run: |
          ssh ubuntu@${{ secrets.EC2_PRODUCTION_HOST }} << 'EOF'
            # Create backup directory
            mkdir -p ~/backups/config
            
            # Get current timestamp
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            
            # Backup important configuration files
            tar -czf ~/backups/config/config_backup_$TIMESTAMP.tar.gz \
              ~/car-craft-lab-backend/.env \
              /etc/nginx/sites-available/car-craft-lab-backend \
              /etc/nginx/sites-enabled/car-craft-lab-backend \
              ~/car-craft-lab-backend/ecosystem.config.js
            
            # Clean old backups (keep last 7 days)
            cd ~/backups/config
            find . -name "config_backup_*.tar.gz" -mtime +$BACKUP_RETENTION_DAYS -delete
            
            echo "Configuration backup completed: config_backup_$TIMESTAMP.tar.gz"
          EOF

      - name: 📥 Download config backup
        run: |
          scp ubuntu@${{ secrets.EC2_PRODUCTION_HOST }}:~/backups/config/config_backup_*.tar.gz ./config-backup.tar.gz

      - name: 📤 Upload to GitHub Releases
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./config-backup.tar.gz
          asset_name: config-backup-$(date +%Y%m%d_%H%M%S).tar.gz
          asset_content_type: application/gzip

  # Backup Verification
  backup-verification:
    name: ✅ Backup Verification
    runs-on: ubuntu-latest
    needs: [database-backup, application-backup, config-backup]
    if: always()

    steps:
      - name: 📥 Download backup artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./backups

      - name: ✅ Verify backup integrity
        run: |
          echo "Verifying backup files..."
          
          # Check if backup files exist and are not empty
          for file in ./backups/*.tar.gz; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file")
              echo "✅ $file - Size: $size bytes"
              
              # Test archive integrity
              if tar -tzf "$file" > /dev/null 2>&1; then
                echo "✅ $file - Archive integrity verified"
              else
                echo "❌ $file - Archive integrity check failed"
                exit 1
              fi
            else
              echo "❌ Backup file not found: $file"
              exit 1
            fi
          done

      - name: 📧 Send backup notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#backups'
          text: |
            💾 Backup Summary
            
            **Database Backup**: ${{ needs.database-backup.result }}
            **Application Backup**: ${{ needs.application-backup.result }}
            **Configuration Backup**: ${{ needs.config-backup.result }}
            
            Backup verification: ${{ job.status }}
            
            Check GitHub Actions for backup artifacts.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always() 